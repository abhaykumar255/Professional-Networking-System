version: '3.8'

services:
  kafka:
    image: docker.io/bitnami/kafka:3.8 #bitnami/kafka
    container_name: kafka
    volumes:
      - "kafka_data:/bitnami"
    networks:
      - professional-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    environment:
      # KRaft Configuration
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listener Configuration
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

  kafka-ui:
    image: ghcr.io/kafbat/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - professional-network
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_KSQLDBSERVER: http://ksqldb0:8088
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  notifications-db:
    image: postgres:latest
    container_name: notifications-db
    volumes:
      - notifications-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=notificationsDB
    ports:
      - "5432:5432"
    networks:
      - professional-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d notificationsDB" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  discovery-server:
    image: abhaykumar255/professional-system/discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    networks:
      - professional-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  notification-service:
    image: abhaykumar255/professional-system/notification-service
    container_name: notification-service
    ports:
      - "9040:9040"
    networks:
      - professional-network
    depends_on:
      - discovery-server
      - kafka
      - notifications-db
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9040/notifications/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s


networks:
  professional-network:

volumes:
  kafka_data:
  notifications-db-data:






