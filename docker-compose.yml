version: '3.8'

services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=professional-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=false
      - "ES_JAVA_OPTS=-Xmx1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - professional-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.1
    container_name: logstash
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - professional-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9600 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.1
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks:
      - professional-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.15.1
    container_name: filebeat
    user: root
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - api-gateway-logs:/var/log/api-gateway:ro
      - posts-service-logs:/var/log/posts-service:ro
      - user-service-logs:/var/log/user-service:ro
      - connection-service-logs:/var/log/connection-service:ro
      - notification-service-logs:/var/log/notification-service:ro
      - discovery-server-logs:/var/log/discovery-server:ro
    networks:
      - professional-network
    depends_on:
      - logstash
    restart: unless-stopped

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - professional-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9411/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka:
    image: docker.io/bitnami/kafka:3.8 #bitnami/kafka
    container_name: kafka
    volumes:
      - "kafka_data:/bitnami"
    networks:
      - professional-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    environment:
      # KRaft Configuration
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listener Configuration
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

  kafka-ui:
    image: ghcr.io/kafbat/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - professional-network
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_KSQLDBSERVER: http://ksqldb0:8088
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - professional-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  notifications-db:
    image: postgres:latest
    container_name: notifications-db
    volumes:
      - notifications-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=notificationsDB
    networks:
      - professional-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d notificationsDB" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  posts-db:
    image: postgres:latest
    container_name: posts-db
    volumes:
      - posts-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postsDB
    networks:
      - professional-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postsDB" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  users-db:
    image: postgres:latest
    container_name: users-db
    volumes:
      - users-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=usersDB
    networks:
      - professional-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d usersDB" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  connections-db:
    image: neo4j:latest
    container_name: connections-db
    volumes:
      - connections-db-data:/data
    environment:
      - NEO4J_AUTH=neo4j/password # Setting up username and password for neo4j
    ports:
      - "7474:7474" # HTTP Port
      - "7687:7687" # Bolt Port
    networks:
      - professional-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  discovery-server:
    image: abhaykumar255/professional-system_discovery-server
    container_name: discovery-server
    volumes:
      - discovery-server-logs:/var/log
    ports:
      - "8761:8761"
    networks:
      - professional-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  notification-service:
    image: abhaykumar255/professional-system_notification-service
    container_name: notification-service
    volumes:
      - notification-service-logs:/var/log
    networks:
      - professional-network
    depends_on:
      - discovery-server
      - kafka
      - notifications-db
      - zipkin
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9040/notifications/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  posts-service:
    image: abhaykumar255/professional-system_posts-service
    container_name: posts-service
    volumes:
      - posts-service-logs:/var/log
    networks:
      - professional-network
    depends_on:
      - discovery-server
      - kafka
      - posts-db
      - zipkin
      - redis
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9010/posts/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  user-service:
    image: abhaykumar255/professional-system_user-service
    container_name: user-service
    volumes:
      - user-service-logs:/var/log
    networks:
      - professional-network
    depends_on:
      - discovery-server
      - kafka
      - users-db
      - zipkin
      - redis
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9020/users/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  connection-service:
    image: abhaykumar255/professional-system_connection-service
    container_name: connection-service
    volumes:
      - connection-service-logs:/var/log
    networks:
      - professional-network
    depends_on:
      - discovery-server
      - kafka
      - connections-db
      - zipkin
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9030/connections/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  api-gateway:
    image: abhaykumar255/professional-system_api-gateway
    container_name: api-gateway
    volumes:
      - api-gateway-logs:/var/log
    ports:
      - "9000:9000"
    networks:
      - professional-network
    depends_on:
      - discovery-server
      - zipkin
      - redis
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s


networks:
  professional-network:

volumes:
  kafka_data:
  notifications-db-data:
  posts-db-data:
  users-db-data:
  connections-db-data:
  elasticsearch-data:
  api-gateway-logs:
  posts-service-logs:
  user-service-logs:
  connection-service-logs:
  notification-service-logs:
  discovery-server-logs:
  redis-data:





