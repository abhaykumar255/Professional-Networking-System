apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
data:
  logstash.yml: |
    api.http.host: "0.0.0.0"
    xpack.monitoring.elasticsearch.hosts: [ "http://elasticsearch:9200" ]
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
    }
    
    filter {
      # Parse JSON logs from containers
      if [log][file][path] =~ /api-gateway|user-service|posts-service|connection-service|notification-service/ {
        json {
          source => "message"
          target => "app_log"
        }
    
        # Extract fields from parsed JSON
        if [app_log] {
          mutate {
            add_field => { 
              "service_name" => "%{[kubernetes][container][name]}"
              "trace_id" => "%{[app_log][traceId]}"
              "span_id" => "%{[app_log][spanId]}"
              "log_level" => "%{[app_log][level]}"
              "logger_name" => "%{[app_log][logger]}"
              "log_message" => "%{[app_log][message]}"
              "timestamp_app" => "%{[app_log][timestamp]}"
            }
          }
        }
      }
    
      # Only process logs from your microservices
      if [kubernetes][container][name] and [kubernetes][container][name] not in ["notification-service", "posts-service", "user-service", "connection-service", "api-gateway"] {
        drop { }
      }
    
      # Drop logs without trace context for now (to reduce noise)
      if [trace_id] == "" or [trace_id] == "-" {
        drop { }
      }
    }
    
    output {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "professional-networking-logs-%{+YYYY.MM.dd}"
      }
      stdout {
        codec => rubydebug
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  labels:
    app: logstash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
        - name: logstash
          image: docker.elastic.co/logstash/logstash:8.15.1
          resources:
            limits:
              memory: 1Gi
              cpu: 500m
            requests:
              memory: 512Mi
              cpu: 100m
          env:
            - name: LS_JAVA_OPTS
              value: "-Xmx512m -Xms512m"
          ports:
            - containerPort: 5044
              name: beats
            - containerPort: 9600
              name: http
          volumeMounts:
            - name: logstash-config
              mountPath: /usr/share/logstash/config/logstash.yml
              subPath: logstash.yml
            - name: logstash-config
              mountPath: /usr/share/logstash/pipeline/logstash.conf
              subPath: logstash.conf
          livenessProbe:
            httpGet:
              path: /
              port: 9600
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 9600
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 10
      volumes:
        - name: logstash-config
          configMap:
            name: logstash-config
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
spec:
  selector:
    app: logstash
  ports:
    - name: beats
      port: 5044
      targetPort: 5044
    - name: http
      port: 9600
      targetPort: 9600